{{- $image := required ".Values.podTemplate.image is required." .Values.podTemplate.image -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "near-node.fullname" . }}
  namespace: {{ include "near-node.namespace" . }}
  labels:
    {{- include "near-node.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "near-node.fullname" . }}
  replicas: {{ .Values.replicas }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- with .Values.updateStrategy.rollingUpdate }}
    rollingUpdate:
      partition: {{ .partition }}
      maxUnavailable: {{ .maxUnavailable }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "near-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "near-node.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: chain-init
          image: {{ $image }}
          imagePullPolicy: {{ .Values.podTemplate.imagePullPolicy }}
          command:
            - "sh"
            - "-c"
          args:
            - |
              set -e # Exit immediately if a command exits with a non-zero status
              if [ -f "{{ .Values.chain.homeDir }}/genesis.json" ]; then
                echo "Genesis file already present, skipping init."
              else
                {{ .Values.chain.binary }} --home {{ .Values.chain.homeDir }} init --chain-id {{ .Values.chain.network }} --download-genesis
              fi
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
        - name: download-snapshot
          image: ubuntu:24.04
          imagePullPolicy: Always
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              set -e # Exit immediately if a command exits with a non-zero status
              set -x # Print commands and their arguments as they are executed

              if  [ "{{ .Values.chain.syncFromSnapshot.enabled }}" = "false" ]; then
                echo "Snapshot sync disabled, skipping..."
              else
                HOME_DIR="{{ .Values.chain.homeDir }}"
                STORE="{{ include "near-node.store" . }}"
                COLD_STORE="{{ include "near-node.coldStore" . }}"

                if [ "$(ls -A {{ .Values.chain.homeDir }}/$STORE/*.sst 2>/dev/null)" ]; then
                  echo "Databases in {{ .Values.chain.homeDir }}/$STORE already exists"

                  if [ "{{ .Values.chain.syncFromSnapshot.force }}" = "false" ]; then
                    if [ "{{ .Values.chain.syncFromSnapshot.resync }}" = "true" ]; then
                      echo "Resyncing snapshot files..."
                      {{ include "near-node.snapshotScript" . | nindent 20 }}
                    else
                      echo "Snapshot files found, skipping download..."
                    fi
                  else
                    echo "Forcing new snapshot download..."
                    rm -rf $HOME_DIR/$STORE/*
                    if [ -d $HOME_DIR/$COLD_STORE ]; then
                      rm -rf $HOME_DIR/$COLD_STORE/*
                    fi
                    echo "Old snapshot files removed, starting download..."
                    {{ include "near-node.snapshotScript" . | nindent 20 }}
                  fi
                else
                  echo "No snapshot files found, starting download..."
                  {{ include "near-node.snapshotScript" . | nindent 18 }}
                fi
              fi
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
            {{- if .Values.volumeClaimTemplates.cold.storageClassName }}
            - name: pvc-cold
              mountPath: {{ .Values.chain.homeDir }}/{{ include "near-node.coldStore" . }}
            {{- end }}
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
      containers:
        - name: near-node
          image: {{ $image }}
          imagePullPolicy: {{ .Values.podTemplate.imagePullPolicy }}
          command:
            - {{ .Values.chain.binary }}
          args:
            - --home
            - {{ .Values.chain.homeDir }}
            - run
          {{- if .Values.logLevel }}
          env:
            - name: RUST_LOG
              value: "{{ .Values.logLevel }}"
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.rpcTemplate.port }}
            - containerPort: {{ .Values.service.p2pTemplate.port }}
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
            {{- if .Values.volumeClaimTemplates.cold.storageClassName }}
            - name: pvc-cold
              mountPath: {{ .Values.chain.homeDir }}/{{ include "near-node.coldStore" . }}
            {{- end }}
            - name: config-volume
              mountPath: {{ .Values.chain.homeDir }}/config.json
              subPath: config.json
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "near-node.fullname" . }}-config
            items:
              - key: config.json
                path: config.json
        {{- if not .Values.volumeClaimTemplates.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
  {{- if .Values.volumeClaimTemplates.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pvc
        namespace: {{ include "near-node.namespace" . }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.hot.storageSize }}
        storageClassName: {{ .Values.volumeClaimTemplates.hot.storageClassName }}
    {{- if .Values.volumeClaimTemplates.cold.storageClassName }}
    - metadata:
        name: pvc-cold
        namespace: {{ include "near-node.namespace" . }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.cold.storageSize }}
        storageClassName: {{ .Values.volumeClaimTemplates.cold.storageClassName }}
    {{- end }}
  {{- end }}
