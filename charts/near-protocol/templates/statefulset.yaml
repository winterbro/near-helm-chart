{{- $image := required ".Values.podTemplate.image is required." .Values.podTemplate.image -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "near-node.fullname" . }}
  namespace: {{ include "near-node.namespace" . }}
  labels:
    {{- include "near-node.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "near-node.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "near-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "near-node.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: init-node
          image: {{ $image }}
          command:
            - "sh"
            - "-c"
          args:
            - |
              set -e # Exit immediately if a command exits with a non-zero status
              if [ -f "{{ .Values.chain.homeDir }}/genesis.json" ]; then
                echo "Genesis file already present, skipping init."
              else
                {{ .Values.chain.binary }} --home {{ .Values.chain.homeDir }} init --chain-id {{ .Values.chain.network }} --download-genesis --download-config
              fi
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
        {{- if .Values.chain.syncFromSnapshot.enabled }}
        - name: download-snapshot
          image: ubuntu:24.04
          command:
            - "sh"
            - "-c"
          args:
            - |
              set -e # Exit immediately if a command exits with a non-zero status

              HOME_DIR="{{ .Values.chain.homeDir }}"
              STORE="{{ include "near-node.store" . }}"
              COLD_STORE="{{ include "near-node.coldStore" . }}"

              if [ {{ .Values.chain.syncFromSnapshot.enabled }} = "true" ]; then
                if [ {{ .Values.chain.syncFromSnapshot.force }} = "false" ]; then
                  {{ include "near-node.snapshotScript" . | nindent 18 }}
                else
                  echo "Forcing snapshot download..."
                  rm -rf $HOME_DIR/$STORE/*
                  if [ -d $HOME_DIR/$COLD_STORE ]; then
                    rm -rf $HOME_DIR/$COLD_STORE/*
                  fi
                  echo "Old snapshot files removed, starting download..."
                  {{ include "near-node.snapshotScript" . | nindent 18 }}
                fi
              else
                echo "Skipping snapshot download..."
              fi
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
            - name: pvc-cold
              mountPath: {{ .Values.chain.homeDir }}/{{ include "near-node.coldStore" . }}
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
        {{- end }}
        {{- if eq .Values.service.p2pTemplate.type "NodePort" }}
        - name: configure-p2p
          image: ubuntu:24.04
          command:
            - "sh"
            - "-c"
          args:
            - |
              set -e # Exit immediately if a command exits with a non-zero status
              set -e

              NAMESPACE={{ include "near-node.namespace" . }}
              NAME={{ include "near-node.fullname" . }}

              # Get the number of replicas from the CosmosFullNode spec
              REPLICAS=$(kubectl get cosmosfullnode $NAME -n $NAMESPACE -o jsonpath='{.spec.replicas}')

              for i in $(seq 0 $((REPLICAS-1))); do
                CONFIGMAP_NAME=$NAME-$i
                SERVICE_NAME=$NAME-p2p-$i
                POD_NAME=$NAME-$i

                # Wait until the ConfigMap is created
                until kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE; do
                  echo "Waiting for ConfigMap $CONFIGMAP_NAME to be created..."
                  sleep 1
                done

                # Get the NodePort
                NODE_PORT=$(kubectl get svc $SERVICE_NAME -o=jsonpath='{.spec.ports[0].nodePort}' -n $NAMESPACE)

                # Check if NODE_PORT was set properly
                if [ -z "$NODE_PORT" ]; then
                  echo "NodePort not found for service $SERVICE_NAME. Exiting."
                  exit 1
                fi

                # Get the current external_address value
                CURRENT_EXTERNAL_ADDRESS=$(kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.config-overlay\.toml}' | grep -o 'external_address = ".*"')
                echo "Current external_address for $CONFIGMAP_NAME: $CURRENT_EXTERNAL_ADDRESS"

                # Check if the external_address needs to be updated
                if [ "$CURRENT_EXTERNAL_ADDRESS" != "external_address = \"$IP_ADDRESS:$NODE_PORT\"" ]; then
                  # Update the config map
                  kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o yaml | sed "s/external_address = .*/external_address = \"$IP_ADDRESS:$NODE_PORT\"/" | kubectl apply -f -
                else
                  echo "ConfigMap $CONFIGMAP_NAME already has the correct external_address."
                fi
              done
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
        {{- end }}
      containers:
        - name: run-node
          image: {{ $image }}
          command:
            - {{ .Values.chain.binary }}
          args:
            - --home
            - {{ .Values.chain.homeDir }}
            - run
          {{- if .Values.logLevel }}
          env:
            - name: RUST_LOG
              value: "{{ .Values.logLevel }}"
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.rpcTemplate.port }}
            - containerPort: {{ .Values.service.p2pTemplate.port }}
          volumeMounts:
            - name: pvc
              mountPath: {{ .Values.chain.homeDir }}
            - name: config-volume
              mountPath: {{ .Values.chain.homeDir }}/config.json
              subPath: config.json
          resources:
            requests:
              cpu: {{ .Values.podTemplate.resources.requests.cpu }}
              memory: {{ .Values.podTemplate.resources.requests.memory }}
            limits:
              cpu: {{ .Values.podTemplate.resources.limits.cpu }}
              memory: {{ .Values.podTemplate.resources.limits.memory }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "near-node.fullname" . }}-config
            items:
              - key: config.json
                path: config.json
        {{- if not .Values.volumeClaimTemplates.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
  {{- if .Values.volumeClaimTemplates.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pvc
        namespace: {{ include "near-node.namespace" . }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.hot.storageSize }}
        storageClassName: {{ .Values.volumeClaimTemplates.hot.storageClassName }}
    {{- if .Values.volumeClaimTemplates.cold.storageClassName }}
    - metadata:
        name: pvc-cold
        namespace: {{ include "near-node.namespace" . }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.cold.storageSize }}
        storageClassName: {{ .Values.volumeClaimTemplates.cold.storageClassName }}
    {{- end }}
  {{- end }}
